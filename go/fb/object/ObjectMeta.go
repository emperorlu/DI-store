// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package object

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ObjectMeta struct {
	_tab flatbuffers.Table
}

func GetRootAsObjectMeta(buf []byte, offset flatbuffers.UOffsetT) *ObjectMeta {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ObjectMeta{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsObjectMeta(buf []byte, offset flatbuffers.UOffsetT) *ObjectMeta {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ObjectMeta{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ObjectMeta) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ObjectMeta) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ObjectMeta) Oid(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ObjectMeta) OidLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ObjectMeta) OidBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ObjectMeta) MutateOid(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *ObjectMeta) ObjectLength() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ObjectMeta) MutateObjectLength(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ObjectMeta) CreateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ObjectMeta) MutateCreateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *ObjectMeta) Version() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ObjectMeta) MutateVersion(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func ObjectMetaStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ObjectMetaAddOid(builder *flatbuffers.Builder, oid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(oid), 0)
}
func ObjectMetaStartOidVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ObjectMetaAddObjectLength(builder *flatbuffers.Builder, objectLength int64) {
	builder.PrependInt64Slot(1, objectLength, 0)
}
func ObjectMetaAddCreateTime(builder *flatbuffers.Builder, createTime int64) {
	builder.PrependInt64Slot(2, createTime, 0)
}
func ObjectMetaAddVersion(builder *flatbuffers.Builder, version int64) {
	builder.PrependInt64Slot(3, version, 0)
}
func ObjectMetaEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
